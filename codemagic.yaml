workflows:
  bible-quest-ios:
    name: "Bible Quest for Kids – iOS Build (.NET MAUI)"
    max_build_duration: 60
    environment:
      xcode: latest
      node: 18.16.0
      groups:
        - appstore_credentials
      vars:
        DOTNET_ROOT: /Users/builder/.dotnet
        DOTNET_CLI_HOME: /Users/builder/.dotnet
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
        DOTNET_CLI_TELEMETRY_OPTOUT: "1"
        APP_IDENTIFIER: app.biblequest
        APP_DISPLAY_VERSION: 1.1.0 # Keep in sync with App Store metadata before submissions
        TEAM_ID: 2989BXM365
    scripts:
      - name: "Compute build number (epoch)"
        script: |
          set -euo pipefail
          EPOCH_BUILD_NUMBER="$(date +%s)"
          echo "APP_BUILD_NUMBER=$EPOCH_BUILD_NUMBER" >> "$CM_ENV"

      - name: "Install .NET SDK locally"
        script: |
          DOTNET_VERSION="8.0.301"
          mkdir -p "$DOTNET_ROOT"
          curl -sSL https://dot.net/v1/dotnet-install.sh -o /tmp/dotnet-install.sh
          chmod +x /tmp/dotnet-install.sh
          /tmp/dotnet-install.sh --version "$DOTNET_VERSION" --install-dir "$DOTNET_ROOT"
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet --info

      - name: "Install MAUI workloads"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet workload install maui-ios --skip-manifest-update
          dotnet workload restore BibleQuestForKids/BibleQuestForKids.csproj

      - name: "Restore NuGet packages"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet restore BibleQuestForKids/BibleQuestForKids.csproj

      - name: "Install signing assets (TestFlight uses same assets as App Store)"
        script: |
          set -euo pipefail
          keychain initialize

          if [ -z "${APPLE_CERTIFICATE_P12_BASE64:-}" ] || [ -z "${APPLE_CERTIFICATE_PASSWORD:-}" ]; then
            echo "ERROR: Missing APPLE_CERTIFICATE_P12_BASE64 or APPLE_CERTIFICATE_PASSWORD environment variables."
            echo "Upload the distribution certificate (.p12) and password as secure environment variables in Codemagic."
            exit 1
          fi

          if [ -z "${APPLE_PROVISIONING_PROFILE_BASE64:-}" ]; then
            echo "ERROR: Missing APPLE_PROVISIONING_PROFILE_BASE64 environment variable."
            echo "Provide the App Store provisioning profile (.mobileprovision) for the bundle id $APP_IDENTIFIER."
            exit 1
          fi

          CERT_P12="$CM_BUILD_DIR/apple_distribution.p12"
          echo "$APPLE_CERTIFICATE_P12_BASE64" | base64 --decode > "$CERT_P12"
          keychain add-certificates --certificate "$CERT_P12" --certificate-password "$APPLE_CERTIFICATE_PASSWORD"

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR/$APP_IDENTIFIER.mobileprovision"
          echo "$APPLE_PROVISIONING_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"

          CODESIGN_IDENTITY="$(security find-identity -v -p codesigning | awk 'NR==1 {print $2}')"
          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "ERROR: No code signing identity imported."
            exit 1
          fi

          echo "CODESIGN_KEY=$CODESIGN_IDENTITY" >> "$CM_ENV"
          echo "CODESIGN_PROVISION=$PROFILE_PATH" >> "$CM_ENV"
          echo "Stored codesign identity and provisioning profile for MAUI publish"

      - name: "Build bundled web assets (npm only)"
        script: |
          cd BibleQuestForKids/wwwroot
          npm ci
          npm run build
          cd ../..
          # Strip dev dependencies
          rm -rf BibleQuestForKids/wwwroot/node_modules BibleQuestForKids/wwwroot/src
          rm -f BibleQuestForKids/wwwroot/package*.json

      - name: "Guard: dist/ exists and index.html present"
        script: |
          DIST="BibleQuestForKids/wwwroot/dist"
          [ -s "$DIST/index.html" ] || { echo "ERROR: dist/index.html missing or empty"; exit 1; }
          echo "✅ Found dist/index.html"
          head -n 10 "$DIST/index.html"

      - name: "Publish .NET MAUI iOS app"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet publish BibleQuestForKids/BibleQuestForKids.csproj \
            -c Release -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:BuildIpa=true \
            -p:ApplicationId="$APP_IDENTIFIER" \
            -p:CFBundleIdentifier="$APP_IDENTIFIER" \
            -p:ApplicationDisplayVersion="$APP_DISPLAY_VERSION" \
            -p:ApplicationVersion="$APP_BUILD_NUMBER" \
            -p:CodesignKey="$CODESIGN_KEY" \
            -p:CodesignProvision="$CODESIGN_PROVISION" \
            -p:CodesignTeamId="$TEAM_ID"

      - name: "Verify IPA contains dist assets"
        script: |
          IPA_PATH=$(find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -name '*.ipa' | head -1)
          unzip -q "$IPA_PATH" -d tmp
          APP_DIR=$(ls tmp/Payload)
          if [ ! -f "tmp/Payload/$APP_DIR/wwwroot/dist/index.html" ]; then
            echo "ERROR: IPA missing dist/index.html"
            exit 1
          fi
          echo "✅ IPA contains dist/index.html"

      - name: "Collect IPA"
        script: |
          mkdir -p output
          find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -name '*.ipa' -exec cp {} output/ \;

    artifacts:
      - output/*.ipa
