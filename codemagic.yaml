# ==========================================================
# Bible Quest iOS Build â€” Codemagic Workflow
#
# Default mode ships to TestFlight. When you're ready for the
# App Store, flip the two flags under `publishing.app_store_connect`:
#   submit_to_testflight: false
#   submit_to_app_store: true
# ==========================================================

workflows:
  bible-quest-ios:
    name: Bible Quest for Kids â€“ iOS Build (.NET MAUI)
    max_build_duration: 60
    environment:
      xcode: latest
      cocoapods: default
      node: 18.16.0
      vars:
        DOTNET_ROOT: /Users/builder/.dotnet
        DOTNET_CLI_HOME: /Users/builder/.dotnet
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
        DOTNET_CLI_TELEMETRY_OPTOUT: "1"
        APP_IDENTIFIER: app.biblequest
        TEAM_ID: 2989BXM365
    integrations:
      app_store_connect: CODE MAGIC API - Distribution (Admin)   # ðŸ‘ˆ must match your integration name exactly in Codemagic
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: main
          include: true
    scripts:
      - name: Install .NET SDK locally (no sudo required)
        script: |
          set -euo pipefail
          DOTNET_VERSION="8.0.301"
          mkdir -p "$DOTNET_ROOT"
          curl -sSL https://dot.net/v1/dotnet-install.sh -o /tmp/dotnet-install.sh
          chmod +x /tmp/dotnet-install.sh
          /tmp/dotnet-install.sh --version "$DOTNET_VERSION" --install-dir "$DOTNET_ROOT"
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet --info

      - name: Install MAUI workload
        script: |
          set -euo pipefail
          export PATH="$DOTNET_ROOT:$PATH"
          mkdir -p "$HOME/.dotnet/temp"
          dotnet workload install maui-ios --skip-manifest-update --temp-dir "$HOME/.dotnet/temp"
          dotnet workload restore BibleQuestForKids/BibleQuestForKids.csproj   # explicitly target the MAUI project so Codemagic sees it

      - name: Build bundled web assets (npm)
        script: |
          set -euo pipefail
          cd BibleQuestForKids/wwwroot
          npm ci
          npm run build

      - name: Restore NuGet packages
        script: |
          set -euo pipefail
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet restore BibleQuestForKids/BibleQuestForKids.csproj

      - name: Configure Apple signing assets
        script: |
          set -euo pipefail
          # Helper that returns the name of the first populated environment
          # variable from the provided list. This lets you keep your existing
          # Codemagic variable names (for example, CM_CERTIFICATE_P12) without
          # editing the script.
          pick_env_name() {
            for var_name in "$@"; do
              eval "value=\${$var_name-}"
              if [ -n "$value" ]; then
                printf '%s' "$var_name"
                return 0
              fi
            done
            echo "Missing required signing variable. Please define one of: $*" >&2
            exit 1
          }

          # Certificate (.p12), its password, and the provisioning profile must be
          # uploaded to Codemagic as base64 strings. Accepted variable names are,
          # in priority order, the ones listed in each call below.
          CERTIFICATE_VAR=$(pick_env_name IOS_CERTIFICATE_P12 CM_CERTIFICATE_P12 IOS_DISTRIBUTION_CERTIFICATE)
          PASSWORD_VAR=$(pick_env_name IOS_CERTIFICATE_PASSWORD CM_CERTIFICATE_PASSWORD IOS_DISTRIBUTION_CERTIFICATE_PASSWORD)
          PROFILE_VAR=$(pick_env_name IOS_PROVISIONING_PROFILE CM_PROVISIONING_PROFILE IOS_DISTRIBUTION_PROFILE)

          # Generate a temporary keychain password for this build so we don't need
          # to store one in Codemagic.
          KEYCHAIN_PASSWORD="$(openssl rand -hex 16)"

          SIGNING_DIR="$HOME/codemagic-signing"
          KEYCHAIN_PATH="$HOME/Library/Keychains/codemagic-signing.keychain-db"
          CERT_PATH="$SIGNING_DIR/apple_distribution.p12"
          PROFILE_TMP="$SIGNING_DIR/profile.mobileprovision"
          PROFILES_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"

          mkdir -p "$SIGNING_DIR" "$PROFILES_DIR"

          echo "Using signing certificate from \"$CERTIFICATE_VAR\""
          echo "Using provisioning profile from \"$PROFILE_VAR\""

          # Decode assets from the selected environment variables
          eval "printf '%s' \"\${$CERTIFICATE_VAR}\"" | base64 --decode > "$CERT_PATH"
          eval "printf '%s' \"\${$PROFILE_VAR}\"" | base64 --decode > "$PROFILE_TMP"
          CERTIFICATE_PASSWORD=$(eval "printf '%s' \"\${$PASSWORD_VAR}\"")

          # Prepare a dedicated, unlocked keychain for the build
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -d user -s "$KEYCHAIN_PATH"

          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Install provisioning profile and capture its UUID for signing
          PROFILE_PLIST=$(security cms -D -i "$PROFILE_TMP")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin <<< "$PROFILE_PLIST")
          mv "$PROFILE_TMP" "$PROFILES_DIR/$PROFILE_UUID.mobileprovision"
          echo "Installed provisioning profile '$PROFILE_NAME' ($PROFILE_UUID)"

          # Detect the imported signing identity so we can feed it to dotnet publish
          IOS_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | awk -F '"' 'NR==1 {print $2}')
          if [ -z "$IOS_IDENTITY" ]; then
            echo "No signing identity available" >&2
            exit 1
          fi
          echo "Using signing identity: $IOS_IDENTITY"

          # Share values with later scripts in this workflow
          echo "export SIGNING_KEYCHAIN_PATH=$KEYCHAIN_PATH" >> "$CM_ENV"
          echo "export PROVISIONING_PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
          echo "export IOS_CODESIGN_IDENTITY=$IOS_IDENTITY" >> "$CM_ENV"
          echo "export KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD" >> "$CM_ENV"  # helpful for debugging follow-up steps

      - name: Publish .NET MAUI iOS app
        script: |
          set -euo pipefail
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet publish BibleQuestForKids/BibleQuestForKids.csproj \
            -c Release \
            -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:ArchiveOnBuild=true \
            -p:CreatePackage=true \
            -p:CodesignKey="$IOS_CODESIGN_IDENTITY" \
            -p:CodesignProvision="$PROVISIONING_PROFILE_UUID" \
            -p:CodesignKeychain="$SIGNING_KEYCHAIN_PATH"

      - name: Collect IPA
        script: |
          set -euo pipefail
          mkdir -p output
          find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -maxdepth 1 -name '*.ipa' \
            -print -exec cp {} output/ \;

    artifacts:
      - output/*.ipa

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: false
