workflows:
  bible-quest-ios:
    name: "Bible Quest for Kids – iOS Build (.NET MAUI)"
    max_build_duration: 60
    environment:
      xcode: latest
      node: 18.16.0
      groups:
        - appstore_credentials
      vars:
        DOTNET_ROOT: /Users/builder/.dotnet
        DOTNET_CLI_HOME: /Users/builder/.dotnet
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
        DOTNET_CLI_TELEMETRY_OPTOUT: "1"
        APP_IDENTIFIER: app.biblequest
        APP_DISPLAY_VERSION: 1.1.0 # Keep in sync with App Store metadata before submissions
        TEAM_ID: 2989BXM365
    scripts:
      - name: "Capture build machine diagnostics"
        script: |
          set -euo pipefail
          echo '== System information =='
          uname -a
          sw_vers
          echo '== Xcode version =='
          xcodebuild -version
          echo '== Available SDKs =='
          xcodebuild -showsdks
          echo '== Disk usage snapshot =='
          df -h
          echo '== Project root contents =='
          ls -al

      - name: "Resolve build number (epoch seed + App Store Connect guard)"
        script: |
          set -euo pipefail

          # Always seed with epoch seconds so TestFlight builds stay unique even without ASC access.
          EPOCH_BUILD_NUMBER="$(date +%s)"
          echo "Seeded APP_BUILD_NUMBER=$EPOCH_BUILD_NUMBER from epoch seconds"

          FINAL_BUILD_NUMBER="$EPOCH_BUILD_NUMBER"

          if [ -n "${APP_STORE_CONNECT_PRIVATE_KEY:-}" ] && \
             [ -n "${APP_STORE_CONNECT_KEY_IDENTIFIER:-}" ] && \
             [ -n "${APP_STORE_CONNECT_ISSUER_ID:-}" ]; then
            echo "Checking App Store Connect for the next safe build number"
            FINAL_BUILD_NUMBER="$(APP_BUILD_NUMBER="$EPOCH_BUILD_NUMBER" \
              APP_DISPLAY_VERSION="$APP_DISPLAY_VERSION" \
              APP_IDENTIFIER="$APP_IDENTIFIER" \
              APP_STORE_CONNECT_PRIVATE_KEY="$APP_STORE_CONNECT_PRIVATE_KEY" \
              APP_STORE_CONNECT_KEY_IDENTIFIER="$APP_STORE_CONNECT_KEY_IDENTIFIER" \
              APP_STORE_CONNECT_ISSUER_ID="$APP_STORE_CONNECT_ISSUER_ID" \
              ruby ci/scripts/maybe_raise_build_number.rb)"
          else
            echo "App Store Connect credentials missing: using epoch build number."
          fi

          if [ -z "$FINAL_BUILD_NUMBER" ]; then
            echo "ERROR: Final build number was empty after resolution." >&2
            exit 1
          fi

          echo "APP_BUILD_NUMBER=$FINAL_BUILD_NUMBER" >> "$CM_ENV"
          echo "Pinned APP_BUILD_NUMBER=$FINAL_BUILD_NUMBER (Reminder: marketing version changes require resetting build number for App Store submissions)."

      - name: "Install .NET SDK locally"
        script: |
          DOTNET_VERSION="8.0.301"
          mkdir -p "$DOTNET_ROOT"
          curl -sSL https://dot.net/v1/dotnet-install.sh -o /tmp/dotnet-install.sh
          chmod +x /tmp/dotnet-install.sh
          /tmp/dotnet-install.sh --version "$DOTNET_VERSION" --install-dir "$DOTNET_ROOT"
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet --info
          dotnet --list-sdks
          dotnet --list-runtimes

      - name: "Install MAUI workloads"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet workload install maui-ios --skip-manifest-update
          dotnet workload restore BibleQuestForKids/BibleQuestForKids.csproj
          dotnet workload list
          echo 'Resolved Xcode tools:'
          xcrun simctl list devices | head -n 40
          msbuild -version || echo 'msbuild not available on PATH yet.'

      - name: "Restore NuGet packages"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet restore BibleQuestForKids/BibleQuestForKids.csproj
          du -sh "$HOME/.nuget/packages" || true

      - name: "Install signing assets (TestFlight uses same assets as App Store)"
        script: |
          set -euo pipefail
          keychain initialize

          if [ -z "${APPLE_CERTIFICATE_P12_BASE64:-}" ] || [ -z "${APPLE_CERTIFICATE_PASSWORD:-}" ]; then
            echo "ERROR: Missing APPLE_CERTIFICATE_P12_BASE64 or APPLE_CERTIFICATE_PASSWORD environment variables."
            echo "Upload the distribution certificate (.p12) and password as secure environment variables in Codemagic."
            exit 1
          fi

          if [ -z "${APPLE_PROVISIONING_PROFILE_BASE64:-}" ]; then
            echo "ERROR: Missing APPLE_PROVISIONING_PROFILE_BASE64 environment variable."
            echo "Provide the App Store provisioning profile (.mobileprovision) for the bundle id $APP_IDENTIFIER."
            exit 1
          fi

          CERT_P12="$CM_BUILD_DIR/apple_distribution.p12"
          echo "$APPLE_CERTIFICATE_P12_BASE64" | base64 --decode > "$CERT_P12"
          keychain add-certificates --certificate "$CERT_P12" --certificate-password "$APPLE_CERTIFICATE_PASSWORD"

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR/$APP_IDENTIFIER.mobileprovision"
          echo "$APPLE_PROVISIONING_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"

          CODESIGN_IDENTITY="$(security find-identity -v -p codesigning | awk 'NR==1 {print $2}')"
          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo "ERROR: No code signing identity imported."
            exit 1
          fi

          echo "CODESIGN_KEY=$CODESIGN_IDENTITY" >> "$CM_ENV"
          echo "CODESIGN_PROVISION=$PROFILE_PATH" >> "$CM_ENV"
          echo "Stored codesign identity and provisioning profile for MAUI publish"
          security find-identity -v -p codesigning

      - name: "Build bundled web assets (npm only)"
        script: |
          cd BibleQuestForKids/wwwroot
          npm ci
          npm run build
          echo '== dist/ contents after npm build =='
          if [ -d dist ]; then
            ls -R dist | head -n 40
          else
            echo 'dist directory not found immediately after build.'
          fi
          cd ../..
          # Strip dev dependencies
          rm -rf BibleQuestForKids/wwwroot/node_modules BibleQuestForKids/wwwroot/src
          rm -f BibleQuestForKids/wwwroot/package*.json
          echo 'Stripped development web assets.'

      - name: "Guard: dist/ exists and index.html present"
        script: |
          DIST="BibleQuestForKids/wwwroot/dist"
          [ -s "$DIST/index.html" ] || { echo "ERROR: dist/index.html missing or empty"; exit 1; }
          echo "✅ Found dist/index.html"
          head -n 10 "$DIST/index.html"

      - name: "Publish .NET MAUI iOS app"
        script: |
          export PATH="$DOTNET_ROOT:$PATH"
          dotnet publish BibleQuestForKids/BibleQuestForKids.csproj \
            -c Release -f net8.0-ios \
            -p:RuntimeIdentifier=ios-arm64 \
            -p:BuildIpa=true \
            -p:ApplicationId="$APP_IDENTIFIER" \
            -p:CFBundleIdentifier="$APP_IDENTIFIER" \
            -p:ApplicationDisplayVersion="$APP_DISPLAY_VERSION" \
            -p:ApplicationVersion="$APP_BUILD_NUMBER" \
            -p:CodesignKey="$CODESIGN_KEY" \
            -p:CodesignProvision="$CODESIGN_PROVISION" \
            -p:CodesignTeamId="$TEAM_ID"
          PUBLISH_ROOT='BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish'
          find "$PUBLISH_ROOT" -maxdepth 2 -type f | sort
          du -sh "$PUBLISH_ROOT"

      - name: "Verify IPA contains dist assets"
        script: |
          IPA_PATH=$(find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -name '*.ipa' | head -1)
          unzip -q "$IPA_PATH" -d tmp
          APP_DIR=$(ls tmp/Payload)
          if [ ! -f "tmp/Payload/$APP_DIR/wwwroot/dist/index.html" ]; then
            echo "ERROR: IPA missing dist/index.html"
            exit 1
          fi
          echo "✅ IPA contains dist/index.html"
          ls -al "tmp/Payload/$APP_DIR/wwwroot/dist" || true

      - name: "Collect IPA"
        script: |
          mkdir -p output
          find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -name '*.ipa' -exec cp {} output/ \;

      - name: "Prepare App Store Connect API key"
        script: |
          set -euo pipefail

          for VAR_NAME in APP_STORE_CONNECT_PRIVATE_KEY APP_STORE_CONNECT_KEY_IDENTIFIER APP_STORE_CONNECT_ISSUER_ID; do
            if [ -z "${!VAR_NAME:-}" ]; then
              echo "ERROR: $VAR_NAME is required to upload to TestFlight/App Store." >&2
              echo "Store the secret in the Codemagic appstore_credentials group." >&2
              exit 1
            fi
          done

          KEY_DIR="$HOME/.appstoreconnect/private_keys"
          mkdir -p "$KEY_DIR"
          KEY_PATH="$KEY_DIR/AuthKey_${APP_STORE_CONNECT_KEY_IDENTIFIER}.p8"

          if printf '%s' "$APP_STORE_CONNECT_PRIVATE_KEY" | grep -q 'BEGIN'; then
            printf '%s\n' "$APP_STORE_CONNECT_PRIVATE_KEY" > "$KEY_PATH"
          else
            printf '%s' "$APP_STORE_CONNECT_PRIVATE_KEY" | base64 --decode > "$KEY_PATH"
          fi

          chmod 600 "$KEY_PATH"
          echo "Prepared App Store Connect API key at $KEY_PATH"

      - name: "Clear pending TestFlight beta reviews before upload"
        script: |
          set -euo pipefail
          echo "Reminder: cancelling beta review keeps TestFlight builds separate from App Store submissions."
          ruby ci/scripts/clear_testflight_beta_review.rb

      - name: "Upload IPA to TestFlight"
        script: |
          set -euo pipefail
          IPA_PATH=$(find output -name '*.ipa' | head -1)
          if [ -z "$IPA_PATH" ]; then
            echo "ERROR: No IPA found to upload." >&2
            exit 1
          fi

          echo "Uploading $IPA_PATH to TestFlight via Transporter (this does not submit to App Store review)."
          ls -al "$IPA_PATH"
          xcrun altool --upload-app \
            --file "$IPA_PATH" \
            --type ios \
            --apiKey "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"

    artifacts:
      - output/*.ipa
