name: iOS Build & Deploy (Bible Quest for Kids)

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Global defaults shared across steps. Keep APP_DISPLAY_VERSION in sync
# with App Store metadata before a production submission; TestFlight
# builds can safely reuse the same value between beta iterations.
env:
  DOTNET_VERSION: '8.0.301'
  APP_IDENTIFIER: app.biblequest
  APP_DISPLAY_VERSION: '1.1.0'

jobs:
  build:
    name: Build and upload TestFlight binary
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Capture runner diagnostics
        run: |
          set -euo pipefail
          echo '== System information =='
          uname -a
          sw_vers
          echo "Xcode version: $(xcodebuild -version | paste -sd ' ' -)"
          echo 'Available SDKs:'
          xcodebuild -showsdks
          echo '== Disk usage snapshot (top level) =='
          df -h
          echo '== Repository structure (first level) =='
          ls -al

      - name: Discover key project files
        run: |
          echo '== .csproj files =='
          find . -maxdepth 5 -name '*.csproj' -print
          echo '== .sln files =='
          find . -maxdepth 5 -name '*.sln' -print

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Log .NET environment
        run: |
          set -euo pipefail
          echo '== dotnet --info =='
          dotnet --info
          echo '== Installed SDKs =='
          dotnet --list-sdks
          echo '== Installed runtimes =='
          dotnet --list-runtimes

      - name: Setup Node.js for web assets
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Log Node.js environment
        run: |
          set -euo pipefail
          echo "node $(node --version)"
          echo "npm $(npm --version)"
          npm config get prefix

      - name: Install required MAUI workloads
        run: |
          dotnet workload install maui-ios --skip-manifest-update
          dotnet workload list

      - name: Verify key MAUI tools
        run: |
          set -euo pipefail
          echo '== Resolving simulators and devices =='
          xcrun simctl list devices | head -n 50
          echo '== msbuild version =='
          msbuild -version || echo 'msbuild not available on PATH yet.'

      - name: Ensure NuGet.org feed is available
        run: |
          if ! dotnet nuget list source | grep -q 'https://api.nuget.org/v3/index.json'; then
            dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget-org
          fi
          dotnet nuget list source

      - name: Restore workloads declared by the project
        run: dotnet workload restore BibleQuestForKids/BibleQuestForKids.csproj

      - name: Restore NuGet packages
        run: |
          set -euo pipefail
          dotnet restore BibleQuestForKids/BibleQuestForKids.csproj --no-cache --disable-parallel
          echo '== Restored package cache snapshot =='
          du -sh ~/.nuget/packages || true

      - name: Build bundled web assets
        working-directory: BibleQuestForKids/wwwroot
        env:
          CI: 'true'
        run: |
          npm ci
          npm run build
          echo '== dist/ contents after npm build =='
          if [ -d dist ]; then
            ls -R dist | head -n 40
          else
            echo 'dist directory not found immediately after build.'
          fi

      - name: Strip development web assets before publishing
        run: |
          rm -rf BibleQuestForKids/wwwroot/node_modules BibleQuestForKids/wwwroot/src
          rm -f BibleQuestForKids/wwwroot/package*.json
          echo 'Stripped development dependencies from wwwroot.'

      - name: Guard dist assets exist
        run: |
          DIST='BibleQuestForKids/wwwroot/dist'
          if [ ! -s "$DIST/index.html" ]; then
            echo 'dist/index.html missing. Run npm build before publishing.' >&2
            exit 1
          fi
          echo '✅ Found dist/index.html'
          head -n 10 "$DIST/index.html"

      - name: Resolve build number
        id: resolve-build
        env:
          APP_STORE_CONNECT_PRIVATE_KEY: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          APP_STORE_CONNECT_KEY_IDENTIFIER: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          set -euo pipefail
          BUILD_NUMBER=$(date +%s)
          echo "Seeded APP_BUILD_NUMBER=$BUILD_NUMBER from epoch seconds"
          echo "Resolved APP_DISPLAY_VERSION=${{ env.APP_DISPLAY_VERSION }}"
          echo "APP_BUILD_NUMBER=$BUILD_NUMBER" >> "$GITHUB_ENV"

      - name: Install signing assets
        env:
          APPLE_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          set -euo pipefail
          KEYCHAIN_PATH="$RUNNER_TEMP/signing.keychain-db"
          security create-keychain -p '' "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p '' "$KEYCHAIN_PATH"
          security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | tr -d '"')
          security default-keychain -s "$KEYCHAIN_PATH"
          echo "Keychain prepared at $KEYCHAIN_PATH"

          echo "$APPLE_CERTIFICATE_P12_BASE64" | base64 --decode > signing.p12
          security import signing.p12 -k "$KEYCHAIN_PATH" -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k '' "$KEYCHAIN_PATH"
          echo 'Imported signing certificate into temporary keychain.'

          PROFILE_DIR="$RUNNER_TEMP/provisioning-profiles"
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR/${APP_IDENTIFIER}.mobileprovision"
          echo "$APPLE_PROVISIONING_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"
          echo "Provisioning profile exported to $PROFILE_PATH"

          CODESIGN_IDENTITY=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | head -1 | awk '{print $2}')
          if [ -z "$CODESIGN_IDENTITY" ]; then
            echo 'No signing identity located in keychain.' >&2
            exit 1
          fi
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          {
            echo "CODESIGN_KEY=$CODESIGN_IDENTITY"
            echo "CODESIGN_PROVISION=$PROFILE_PATH"
            echo "TEAM_ID=$TEAM_ID"
          } >> "$GITHUB_ENV"

      - name: Mirror provisioning profile to legacy path
        env:
          LEGACY_PROVISION_PATH: /Users/runner/work/_temp/provisioning-profiles/app.biblequest.mobileprovision
        run: |
          set -euo pipefail
          mkdir -p "$(dirname "$LEGACY_PROVISION_PATH")"
          cp "${{ env.CODESIGN_PROVISION }}" "$LEGACY_PROVISION_PATH"
          echo "LEGACY_PROVISION_PATH=$LEGACY_PROVISION_PATH" >> "$GITHUB_ENV"

      - name: Guard exported provisioning profile path
        run: |
          set -euo pipefail
          if [ -z "${{ env.CODESIGN_KEY }}" ]; then
            echo 'Expected signing identity exported to $CODESIGN_KEY but it was empty.' >&2
            exit 1
          fi

          if [ ! -f "${{ env.CODESIGN_PROVISION }}" ]; then
            echo 'Expected provisioning profile referenced by $CODESIGN_PROVISION not found.' >&2
            exit 1
          fi

          if [ -n "${LEGACY_PROVISION_PATH:-}" ] && [ ! -f "$LEGACY_PROVISION_PATH" ]; then
            echo "Expected provisioning profile mirror at $LEGACY_PROVISION_PATH not found." >&2
            exit 1
          fi

          if ! security find-identity -v -p codesigning | grep -q "${{ env.CODESIGN_KEY }}"; then
            echo 'Signing identity referenced by $CODESIGN_KEY not currently available to codesign.' >&2
            security find-identity -v -p codesigning || true
            exit 1
          fi

          echo "✅ Using provisioning profile at ${{ env.CODESIGN_PROVISION }}"
          if [ -n "${LEGACY_PROVISION_PATH:-}" ]; then
            echo "✅ Legacy provisioning profile mirror available at $LEGACY_PROVISION_PATH"
          fi
          echo "✅ Signing identity ${{ env.CODESIGN_KEY }} is available"
          echo 'Current keychain identities:'
          security find-identity -v -p codesigning || true

      - name: Publish .NET MAUI iOS app
        run: >-
          dotnet publish BibleQuestForKids/BibleQuestForKids.csproj
          -c Release
          -f net8.0-ios
          -p:RuntimeIdentifier=ios-arm64
          -p:BuildIpa=true
          -p:ApplicationId=${{ env.APP_IDENTIFIER }}
          -p:CFBundleIdentifier=${{ env.APP_IDENTIFIER }}
          -p:ApplicationDisplayVersion=${{ env.APP_DISPLAY_VERSION }}
          -p:ApplicationVersion=${{ env.APP_BUILD_NUMBER }}
          -p:CodesignKey=${{ env.CODESIGN_KEY }}
          -p:CodesignProvision="${{ env.CODESIGN_PROVISION }}"
          -p:CodesignTeamId=${{ env.TEAM_ID }}
          --verbosity minimal
      - name: Summarize publish output
        run: |
          set -euo pipefail
          PUBLISH_ROOT='BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish'
          if [ ! -d "$PUBLISH_ROOT" ]; then
            echo "Publish output directory $PUBLISH_ROOT not found." >&2
            exit 1
          fi
          echo "Contents of $PUBLISH_ROOT:"
          find "$PUBLISH_ROOT" -maxdepth 2 -type f | sort
          echo 'Disk usage summary:'
          du -sh "$PUBLISH_ROOT"

      - name: Verify IPA contains dist assets
        run: |
          IPA_PATH=$(find BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish -name '*.ipa' | head -1)
          if [ -z "$IPA_PATH" ]; then
            echo 'No IPA found after publish step.' >&2
            exit 1
          fi
          echo "Inspecting IPA at $IPA_PATH"
          unzip -q "$IPA_PATH" -d tmp
          APP_DIR=$(ls tmp/Payload)
          if [ ! -f "tmp/Payload/$APP_DIR/wwwroot/dist/index.html" ]; then
            echo 'IPA missing dist/index.html' >&2
            exit 1
          fi
          echo "Payload app directory: $APP_DIR"
          echo '✅ IPA contains dist/index.html'
          ls -al "tmp/Payload/$APP_DIR/wwwroot/dist" || true

      - name: Upload IPA to TestFlight (does not submit to App Store review)
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish/*.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_KEY_IDENTIFIER }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_PRIVATE_KEY }}
          bundle-id: ${{ env.APP_IDENTIFIER }}

      - name: Archive IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: BibleQuestForKids-ipa
          path: BibleQuestForKids/bin/Release/net8.0-ios/ios-arm64/publish/*.ipa
          if-no-files-found: error
